= View security insights

After you update your component, the update automatically triggers the `on-push` pipeline. By default, {ProductShortName} builds your applications using the default build pipeline. This pipeline offers quick and easy containerized deployment. It also secures your supply chain, by conforming to the specification for SLSA Build Level 3.


.A successful pipeline run
image::pipeline_run.png[]

The pipeline run offers a visual representation of all the tasks in a pipeline. A "green" status for each task indicates a successful pass through all checks, simplifying your development workflow by minimizing the need for detailed pipeline oversight.

The pipeline run includes the following standard tasks for code retrieval, compilation, building, and scanning:

[Discrete]
== `init`
Initialize Pipeline Task, include flags for rebuild and auth. Generates image repository secret used by the PipelineRun.

[Discrete]
== `clone-repository`
The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace.

[Discrete]
== `build-container`
The  `build-container` task builds source code into a container image and pushes the image into container registry using buildah tool. In addition it generates a SBOM file, injects the SBOM file into final container image and pushes the SBOM file as separate image using cosign tool.

[Discrete]
== `acs` tasks
[NOTE]
====
If you have installed ACS, the status of the ACS tasks (for example, `roxctl image scan`) appears green. Otherwise, it appears greyed out.
====

.The ACS tasks in the pipeline run
image::acs-tasks.png[]

The pipeline incorporates three ACS tasks using `roxctl` to perform comprehensive security checks:

* `roxctl image scan` - Scans the code for vulnerabilities

* `roxctl image check` - Scans the code for policy check. For example, 'No log4j allowed' or perhaps no curl, wget nor a package manager in a production image.

* `roxctl deployment check` - Scans the `deployment.yaml` to  identify that your Deployment.yaml has not properly configured its resource request and limit.

These tasks ensure adherence to security policies and configurations right from the development stage.

[discrete]
== Visualizing ACS scan reports

In Red Hat Developer Hub, under the *CI* tab, the Pipeline Runs section offers a feature to access and interpret detailed task reports through a structured pop-up interface. The pop-up consists of the following sections:

* *Advanced Cluster Security (conditionally shown on the availability of ACS tasks):* This section displays the individual tabs all the ACS scan tasks, for example, Image scan, Image check, and Deployment check, and offers an initial summary of the security issues.

* *Others:* This section displays the results of a `PipelineRun`, for example, IMAGE_URL, and `IMAGE_DIGEST`. This section displays only when there is more than one section (for example, Enterprise Contract or Advanced Cluster Security) available in the pop-up.

To view ACS scan reports:

. Select *Catalog* and open an appropriate component for which you want to review the ACS scan reports
. Select the *CI* tab > *Actions* column > *View output* icon and review the detailed ACS scan reports in the software components.

+
.The detailed ACS scan reports
image::acs-report.png[]

[discrete]
== Interpreting ACS scan reports

The detailed reports generated by Advanced Cluster Security (ACS) tasks are instrumental in providing security insights crucial for maintaining a robust security posture.

Here's how to interpret these reports:

* *Vulnerability Breakdown:* ACS scans categorize detected vulnerabilities by severity (Critical, Important, Moderate, Low), status (fixable, non-fixable), and offer a summary of the scan results. This categorization includes the total number of vulnerabilities and components analyzed, alongside specific Common Vulnerabilities and Exposures (CVEs) identified.

* *Details Provided:* For each identified vulnerability, the report includes:

** *CVE ID:* A unique identifier for the vulnerability.
** *Severity:* The level of threat posed by the vulnerability.
** *Component:* The software component affected by the vulnerability.
** *Component Version:* The version of the affected component.
** *Remediation Suggestions:* Recommendations for addressing the vulnerability, including the version in which the vulnerability is fixed, if applicable.

[Discrete]
== `show-sbom`
The `scan-export-sbom` task contributes to software supply chain transparency by listing all software libraries a component uses, facilitating the identification of vulnerabilities and assessment of security impacts.

.The `scan-export-sbom` task in the pipeline run
image::sbom-export.png[]

The task pushes the SBOM to a CycloneDX repository for easier access and utilization outside of the CI process.

[NOTE]
====
- If you have installed TPA, the status of the `scan-export-sbom` task appears green. Otherwise, it appears greyed out.

- {ProductShortName} does not support CycloneDX.
====

[discrete]
== Viewing SBOM

You can use an SBOM to better understand the composition of your software, identify vulnerabilities, and assess the potential impact of any security issues that might arise.

.Procedure

. Select *Catalog* and open an appropriate component for which you want to view SBOM.
. Select the *CI* tab and then select the link icon.

.. If you have defined the external link, selecting link icon displays the SBOM in a new tab.

.. If you have not defined an external link, selecting link icon displays the SBOM task logs and you can use your web browser to immediately search the SBOM for terms that indicate vulnerabilities in your software supply chain. For example, try searching for `log4j`.

[discrete]
== Reading the SBOM

In the SBOM, as the following sample excerpt shows, you can see four characteristics of each library that a project uses:

* Its author or publisher

* Its name

* Its version

* Its licenses

This information helps you verify that individual libraries are safely-sourced, updated, and compliant.

.Example SBOM

[source,json]
----
{
   "bomFormat": "CycloneDX",
   "specVersion": "1.4",
   "serialNumber": "urn:uuid:89146fc4-342f-496b-9cc9-07a6a1554220",
   "version": 1,
   "metadata": {
       ...
   },
   "components": [
       {
           "bom-ref": "pkg:pypi/flask@2.1.0?package-id=d6ad7ed5aac04a8",
           "type": "library",
           "author": "Armin Ronacher <armin.ronacher@active-4.com>",
           "name": "Flask",
           "version": "2.1.0",
           "licenses": [
               {
                   "license": {
                       "id": "BSD-3-Clause"
                   }
               }
           ],
           "cpe": "cpe:2.3:a:armin-ronacher:python-Flask:2.1.0:*:*:*:*:*:*:*",
           "purl": "pkg:pypi/Flask@2.1.0",
           "properties": [
               {
                   "name": "syft:package:foundBy",
                   "value": "python-package-cataloger"
                   ...
----
