= View security insights
After you update your component, the system automatically triggers the {ProductShortName} pipeline. To view the pipeline run:

. Select *Catalog* and then select an appropriate component for which you want to view pipeline run.

. Select *CI* tab. The system displays the Pipeline Run section.

<image>

The {ProductShortName} pipeline offers a clear and efficient process for developers. When each task in the pipeline shows a "green" status, it means your updates have successfully passed all checks, ensuring a smooth workflow. This design helps you concentrate on development without the need for detailed oversight of the pipeline's inner workings.

*The role of {RHDHLongName} plugins*

The {RHDHShortName} comes pre-integrated with several plugins enhancing the developer experience significantly. All the pipeline runs have some standard tasks such as get the code, compile, build, and run some scans. Apart from the standard `git clone`, `package` and `scan source` tasks, {ProductShortName} pipeline offers some specific tasks. For example, 
build-sign-image, `acs` tasks, and `scan-export-sbom`.


== Enhancing security with `build-sign-image`

The build-sign-image phase integrates Tekton Chains to enhance supply chain security within OpenShift Pipelines. By signing task runs and utilizing attestation formats such as in-toto, Tekton Chains elevates trust and security throughout the development process.

<image>

When Tekton Chains is configured, a signed badge appears next to the PipelineRun name, indicating the successful implementation of security measures. For information on configuring Tekton Chains, see link:https://docs.openshift.com/pipelines/1.13/secure/using-tekton-chains-for-openshift-pipelines-supply-chain-security.html[Using Tekton Chains for OpenShift Pipelines supply chain security].

Furthermore, by navigating to the *Image Registry* tab, you can examine additional security artifacts. The *Image Registry* tab includes `.att` (attestations), `.sig` (signatures), and `.sbom` (Software Bill of Materials) files associated with the container image. These artifacts play a crucial role in enhancing the application's security, offering verifiable proof of the integrity and trustworthiness of the software components.

== Advanced Cluster Security (ACS) tasks

[NOTE]
====
If ACS and is installed - We support the tasks mentioned in the sample pipelines, example ACS scanner, public quay. You want more information on support and configuration, refer <link-to-doc>

If ACS and is not installed - The task in the pipeline will be greyed out
====

The pipeline incorporates three ACS tasks using `roxctl` to perform comprehensive security checks:

* `roxctl image scan` - Scans the code for vulnerabilities

* `roxctl image check` - Scans the code for policy check. For example, 'No log4j allowed' or perhaps no curl, wget nor a package manager in a production image.

* `roxctl deployment check` - Scans the `deployment.yaml` to  identify that your Deployment.yaml has not properly configured its resource request and limit.


These tasks ensure adherence to security policies and configurations right from the development stage.

== Visualizing security reports

In Red Hat Developer Hub, under the *CI* tab, the Pipeline Runs section offers a feature to access and interpret detailed task reports through a structured pop-up interface. The pop-up consists of the following sections:

* *Advanced Cluster Security (conditionally shown on the availability of ACS tasks):* If you have used Advanced Cluster Security (ACS) scan tasks in your pipeline, this section displays the individual tabs all the ACS scan tasks, for example, Image scan, Image check, and Deployment check, and offers an initial summary of the security issues.

* *Others:* This section displays the results of a `PipelineRun`, for example, IMAGE_URL, and `IMAGE_DIGEST`. This section displays only when there is more than one section (for example, Enterprise Contract or Advanced Cluster Security) available in the pop-up.

To view ACS scan reports:

. Log in to Red Hat Developer Hub.
. Select *Catalog* and open an appropriate component for which you want to review the ACS scan reports
. Select the *CI* tab > *Actions* column > *View output* icon and review the detailed vulnerabilities reports in the software components.


<image>

=== Interpreting vulnerability scan reports

The detailed reports generated by Advanced Cluster Security (ACS) tasks are instrumental in providing security insights crucial for maintaining a robust security posture. 

Here's how to interpret these reports:

* *Vulnerability Breakdown:* ACS scans categorize detected vulnerabilities by severity (Critical, Important, Moderate, Low), status (fixable, non-fixable), and offer a summary of the scan results. This categorization includes the total number of vulnerabilities and components analyzed, alongside specific Common Vulnerabilities and Exposures (CVEs) identified.

* *Details Provided:* For each identified vulnerability, the report includes:

** *CVE ID:* A unique identifier for the vulnerability.
** *Severity:* The level of threat posed by the vulnerability.
** *Component:* The software component affected by the vulnerability.
** *Component Version:* The version of the affected component.
** *Remediation Suggestions:* Recommendations for addressing the vulnerability, including the version in which the vulnerability is fixed, if applicable.

<image>

== `scan-export-sbom`

A software bill of materials (SBOM) provides greater transparency for your software supply chain. In {ProductShortName}, an SBOM lists all the software libraries that a component uses. Those libraries can enable specific functionality or facilitate development.

[NOTE]
====
If TPA is installed - you can view the sbom

If TPA is not installed - The task in the pipeline will be greyed out
====

The `scan-export-sbom` task pushes the SBOM to a CycloneDX repository. Currently, the SBOM is stored in Quay and is not in an easily accessible or readable format. Pushing the SBOM to an additional repository allows us to access the raw JSON/XML file for further use outside of the CI process.

To manage SBOM, refer <link-to-doc>

=== View SBOM

In Red Hat Developer Hub, under the *CI* tab, the Pipeline Runs section offers a feature to view Software Bill of Material (SBOM). This enhances transparency and control over your supply chain by listing all the software libraries a component utilizes. These libraries may provide specific functionality or facilitate development.

You can use an SBOM to better understand the composition of your software, identify vulnerabilities, and assess the potential impact of any security issues that might arise.

.Procedure

. Select *Catalog* and open an appropriate component for which you want to view SBOM.
. Select the *CI* tab.

.. If you have defined the external link, select link icon and the system displays the SBOM in a new tab.

.. If you have not defined an external link, selecting link icon displays the SBOM task logs and you can use your web browser to immediately search the SBOM for terms that indicate vulnerabilities in your software supply chain. For example, try searching for `log4j`.

== Reading the SBOM

In the SBOM, as the following sample excerpt shows, you can see four characteristics of each library that a project uses:

* Its author or publisher

* Its name

* Its version

* Its licenses

This information helps you verify that individual libraries are safely-sourced, updated, and compliant.

.Example SBOM

[source,terminal]
----
{
    "bomFormat": "CycloneDX",
    "specVersion": "1.4",
    "serialNumber": "urn:uuid:89146fc4-342f-496b-9cc9-07a6a1554220",
    "version": 1,
    "metadata": {
        ...
    },
    "components": [
        {
            "bom-ref": "pkg:pypi/flask@2.1.0?package-id=d6ad7ed5aac04a8",
            "type": "library",
            "author": "Armin Ronacher <armin.ronacher@active-4.com>",
            "name": "Flask",
            "version": "2.1.0",
            "licenses": [
                {
                    "license": {
                        "id": "BSD-3-Clause"
                    }
                }
            ],
            "cpe": "cpe:2.3:a:armin-ronacher:python-Flask:2.1.0:*:*:*:*:*:*:*",
            "purl": "pkg:pypi/Flask@2.1.0",
            "properties": [
                {
                    "name": "syft:package:foundBy",
                    "value": "python-package-cataloger"
                    ...
----
