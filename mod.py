:_newdoc-version: 2.16.0
:_template-generated: 2024-03-12
:_mod-docs-content-type: PROCEDURE

[id="deploy-application-and-view-security-insights_{context}"]
= Deploy application and view security insights

Your organization may follow its unique process from development to production. A common approach involves stages from development, to pre-production, and finally production, guided by specific rules and triggers for moving builds forward.

As an example, we use ArgoCD in OpenShift GitOps for continuous deployment across all stages. Deployment initiation requires updating the GitOps repository.

[NOTE]
====
The procedures explained in this guide is just one way to transition applications; organizations can adapt any suitable method.
====

[Discrete]
== Promoting a build to a pre-production environment

To promote a build to pre-production or production environment, simply make a pull or push request from your repository. This triggers a Tekton pipeline that updates the GitOps repository, enabling ArgoCD to deploy the application.

. Open the local clone-repository that you cloned when initiating a build pipeline.

Ensure that the local clone is up-to-date

. You can trigger a promotion pipeline either via a push or pull request. Pull request is a preferred method.

git commit --allow-empty -m "/promote dev"

promote stage ideally means promote dev to stage

git commit --allow-empty -m "/promote stage"

promote stage ideally means promote stage to prod

What happens is the pipeline will run, it will check for the messages the commands, if it sees the command it will implement the command and will do the promotion.

. git push

.Verification
You can go to the CD tab, and in the ArgoCD hisory section and in different columns you can see the latest message which will give you can idea of the current status of the app (for example, appname-prod), instance, deployment details, author of the pipeline run, commit message (for example, Promote stage to prod), and resulted container image that was moved to prod


* Once the release pipeline has completed, you can see your application has been promoted to pre-prod and is available via the Topology plug-in.

= View security insights

The promotion pipeline run offers a visual representation of all the tasks in a pipeline. A "green" status for each task indicates a successful pass through all checks, simplifying your development workflow by minimizing the need for detailed pipeline oversight.

The pipeline run includes the following standard tasks for code retrieval, compilation, handle promotion action:

== Enterprise contract task in the pipeline run

Within the promotion pipeline, a task named `verify-enterpirse-contract` enhances security by validating container images. This task leverages the Enterprise Contract (EC), a command-line interface that works along side Sigstoreâ€™s cosign, to assess the integrity of image signatures and attestations.

The `build-sign-image` task generates `.sig` (signature) and `.att` (attestation) artifacts, storing them in the container registry. EC evaluates these artifacts using the Lego policy language from the Open Policy Agent, enabling the creation of custom rules for reviewing cosign attestations. By default, EC examines the SLASA provenance attestation generated by Tekton Chains.

The primary function of EC in the promotion pipeline is to verify that the container image originates from a corporate standard or approved build system, ensuring it was not created on an unsecured environment. Alongside the container image, `.att`, `.sbom`, and `.sig` files are stored, facilitating their collective management and transfer potentially with tools like Skopeo.

For more information on Enterprise Contract, refer <Doc on which Jocelyn is working>.
